const path = require("path");

module.exports.config = {
  name: "log",
  eventType: ["log:unsubscribe", "log:subscribe", "log:thread-name"],
  version: "1.0.0",
  credits: "Tpk",
  description: "Logs bot activity notifications!",
  envConfig: {
    enable: true
  }
};

const logger = require(path.join(__dirname, "SIDDIK/catalogs/utils/log.js"));

module.exports.run = async function ({ api, event, Users, Threads, Currencies }) {
  const threadSetting = (await Threads.getData(String(event.threadID))).data || {};
  const threadInfo = await api.getThreadInfo(event.threadID);
  var threadName = threadInfo.threadName || "Name not available";

  if (!global.configModule[this.config.name].enable) return;

  let botID = api.getCurrentUserID();
  let threadMem = threadInfo.participantIDs.length;

  const moment = require("moment-timezone");
  const time = moment.tz("Asia/Dhaka").format("D/MM/YYYY HH:mm:ss");  // Bangladesh Timezone
  let approvalMode = threadInfo.approvalMode ? "Enabled" : "Disabled";
  let admins = threadInfo.adminIDs.length;
  let icon = threadInfo.emoji;
  const userName = global.data.userName.get(event.author) || await Users.getNameUser(event.author);

  var formReport = 
    "====「 BOT NOTIFICATION 」====\n━━━━━━━━━━━━━━━━━━" +
    `\n[🧸] ➜ Group Name: ${threadName}` +
    `\n[🔰] ➜ Group ID: ${event.threadID}` +
    `\n[💓] ➜ Total Members: ${threadMem}` +
    `\n[🧩] ➜ Approval Mode: ${approvalMode}` +
    `\n[⚜️] ➜ Admins: ${admins}` +
    `\n[😻] ➜ Chat Emoji: ${icon ? icon : 'Not Set'}` +
    "\n━━━━━━━━━━━━━━━━━━" +
    "\n[💞] ➜ Action: {task}" +
    `\n[👤] ➜ User Name: ${userName}` +
    `\n[🍄] ➜ User ID: ${event.author}` +
    `\n[🌐] ➜ Facebook Profile: https://www.facebook.com/profile.php?id=${event.author}` +
    "\n━━━━━━━━━━━━━━━━━━\n" +
    `[⏰] ➜ Time: ${time}`,
    task = "";

  switch (event.logMessageType) {
    case "log:thread-name": {
      let newName = event.logMessageData.name || "Name not available";
      task = `User changed the group name to: ${newName}`;
      await Threads.setData(event.threadID, { name: newName });
      break;
    }
    case "log:subscribe": {
      if (event.logMessageData.addedParticipants.some(i => i.userFbId == botID)) {
        task = "User added the bot to a new group!";
      }
      break;
    }
    case "log:unsubscribe": {
      if (event.logMessageData.leftParticipantFbId == botID) {
        if (event.senderID == botID) return;
        const data = (await Threads.getData(event.threadID)).data || {};
        data.banned = true;
        let reason = "Bot was removed without permission.";
        data.reason = reason;
        data.dateAdded = time;
        await Threads.setData(event.threadID, { data });
        global.data.threadBanned.set(event.threadID, { reason: data.reason, dateAdded: data.dateAdded });

        task = "User kicked the bot from the group!";
      }
      break;
    }
    default:
      break;
  }

  if (task.length == 0) return;
  formReport = formReport.replace(/\{task}/g, task);

  var god = "8633920226631307";  // Change this to the actual Facebook User ID

  return api.sendMessage({
    body: formReport
  }, god, (error, info) => {
    if (error) return logger(formReport, "[ Logging Event ]");
  });
};
